aggregation.failed=Failed to execute the aggregation pipeline:  {0}
aggregation.collection.name=Aggregation options must have a collection named.
at.least.one.update.required=At least one update operation is required.
at.least.one.sort.required=At least one sort is required.
bad.shard.keys=Unknown properties used as shard keys:  {0}
build.already.called=build() has already been called on this builder.
cannot.find.type.in.document=No type information found in the document.
cannot.instantiate=The type ''{0}'' can not be instantiated: {1}
cannot.persist.null.entity=Can not persist a null entity.
cannot.shard.collection=Can not shard collection {0}.{1}.
collection.not.mapped=The collection ''{0}'' is not mapped to a java class.
concurrent.modification=Entity of type {0} (id={1}) was not persisted. Either it was modified by another process or was improperly \
  initialized.  See the versioning documentation for more details.
@warn[once].configured.operation={0} is configured in the config file and should not be called directly.
config.database.required=The database name is a required field and was not configured.
config.packages.required=The packages list is a required field and was not configured.
constraint.violation={0} complained about {1}
contradicting.annotations=A property can be either annotated with @{0} OR @{1}, but not both.
conversion.not.supported=No conversion exists yet for this type:  {0}
delete.with.class=Did you mean to delete all documents? Try ds.find({0}.class).delete()
document.stream.exceeded=No more elements remaining
duplicate.discriminators=Two entities have been mapped using the same discriminator value ({0}):  {1} and {2}
duplicated.mapped.name=Duplicated mapped name found on {0}: {1}
duplicated.parameter.name=Duplicated parameter name found on {0}: {1}
encoding.only=This codec is for encoding only.
mappingAnnotationNeeded={0} must be annotated with either @Entity, @ExternalEntity, or @Embedded.
field.cannot.be.null=Field name can not be null.
filter.mapping.not.supported=Conversion of {0} is not currently supported.
id.required=An @Id property is required on top level entities.  {0} does not have an @Id property.
illegal.argument=Illegal argument of type {0} given where a type of {1} was expected.
instantiation.problem=Can''t instantiate the type {0}: {1}
invalid.bson.operation=Value expected to be of type {0} is of unexpected type {1}
invalid.annotation.combination={0} is annotated with @{1} and cannot be mixed with other annotations (like @Reference)
invalid.index.path=The path ''{0}'' can not be validated against ''{1}'' and may represent an invalid index
invalid.path.target=Could not resolve path ''{0}'' against ''{1}''.  Unknown path element: ''{2}''.
key.not.allowed.as.property=Keys are not allowed as properties.  Use (lazy) references instead.
lifecycle.noargs=A type with lifecycle events must have a no-arg constructor: {0}
logged.query=logged query: {0}
@debug[once].mapping.package=Mapping package ''{0}''
mismatched.field.on.external.type=Mapped field ''{0}'' on ''{1}'' does not match any fields on ''{2}''.
mismatched.method.on.external.type=Mapped method ''{0}'' with parameters {1} on ''{2}'' does not match any methods on ''{3}''.
misnamed.constructor.parameter=Named constructor parameter ''{1}'' does not match mapped property on {0}.
@warn[once].missing.config.file=The configuration file {0} could not be found.
missing.id.on.replace=The entity to be replaced has no ID. Please insert this entity first.
missing.referenced.entities=Referenced ''{0}'' entities could not be found during a fetch.
missing.referenced.entity=Referenced ''{0}'' entity could not be found during a fetch.
mixed.group.id.definition=A group ID can either reference a field (e.g., "$name") or have a list of expressions but not both.
mixed.mode.projections=Only one form of projection allowed at a time.
mixed.projections=Projections can not mix included and excluded fields together.
mixed.modes.not.allowed={0} can either take a single value or a document but not both.
mixed.update.operations.not.allowed=Individual fields can not be updated when $setting the document itself.
multiple.id.properties.found="More than one @Id property found ({0})."
noarg.constructor.not.found={0} does not have a 0 argument constructor.
no.id.and.not.object.id=The ID field was not assigned and is not an ObjectId. The default ID type assigned by the server is an ObjectId so\
  \ loads of this entity type ( {0} ) will likely fail.
no.id.property.found=No field is annotated with @Id on {0} but it is required
no.id.for.reference=No ID found for referenced entity.  Ensure referenced entities are saved first.
no.inner.classes=Inner classes can not be used.  Please make this type static:  {0}
no.mapped.collection=No collection has been mapped for {0}.  Types must be annotated with @Entity to be mapped to a collection.
no.matching.documents=No matching documents could be found.
no.refresh.codec=No refresh codec was found for {0}. This operation can only be performed on Morphia mapped types.
no.shard.key.match=No documents were updated. Was a shard key value changed? [{0}]
no.suitable.constructor=No suitable constructor found for type: ''{0}''
no.documents.updated=No documents were updated by the operation for ID:  {0}
not.mappable={0} is not a mappable type. Mappable types need to be annotated with either @Entity or @Embedded.
not.null={0} can not be null.
null.update.entity=The value passed in for $set can not be null.
only.number.types.allowed=Currently only the following types are allowed: integer, long, double, float.
mapper.options.locked=This Builder has already been built and is now locked.  To update an existing set of options use builder\
  (MapperOptions) to create a new Builder.
persistence.not.intended=This type is not intended for persistence and is unsupported in this context.
query.not.logged=No query document was logged for this query.
referred.type.missing.id={0} is annotated with @Reference but the class {1} is missing the @Id annotation
translation.not.currently.supported=This mapping is not currently supported.
unknown.mongo.db.version=Could not find a match for the suggested version: {0}
unmapped.type=Unknown type: {0}
unnamed.constructor.parameter=Unnamed constructor parameter found on ''{0}''.  Annotate parameters with @Name.
unhandled.type.data=Unknown type data:  {0}
update.sort.options={0} can not be set if {1} already is
value.cannot.be.null=Value can not be null.
values.cannot.be.null.or.empty=Values can not be null or empty.
version.manually.set=When versioning entities, the version properties must not be manually given values.
versioned.update.on.nonversioned.entity=A versioned updated was attempted on a nonversioned entity.
found.unannotated.class=Unannotated class found:  {0}.  Unannotated classes are not allowed when scanning packages.  If you want \
  this class mapped, please call map() and explicitly pass this class reference in.
more.than.one.mapper=Found more than one class mapped to collection ''{0}'': {1}
test.feature.only=This feature is intended for testing and debugging only.
no.mapped.classes=No classes have been mapped.
ignoring.transient.property={0} is marked as transient and will not be persisted.
unset.names.dollar.sign=Field names in a $unset can not start with ''$''.  Automatically stripping the ''$'' from the names.
@warn[once].insert.many.alternate.collection=You have specified an alternate collection (''{0}'') when inserting many entities of \
  different types. This will put all entities, regardless of type, in to the same collection.
calling.lifecycle.method=Calling lifecycle method(@{0} {1}) on {2}
calling.interceptor.method=Calling interceptor method {0} on {1}
### Document Reader
cannot.read.name=name() can''t be called when iterating List values
invalid.reader.state={0} can only be called when State is {1}, not when State is {2}."
not.array.end=Call to end array made before the end of the array
not.document.type=Value is not a document type
not.document.end=Call to end document made before the end of the document
unbalanced.opens=Starts and ends are currently unbalanced: arrays open:  {0},  documents open:  {1}.  current state:  {2}
### Document Writer
already.at.root=No previous state found.  Already at the root.
cant.start.array=Can not start a new array while in state: {0}
cant.start.document=Can not start a new document while in state: {0}
not.in.valid.state=Was not expecting a {0} while in the {1} state.
