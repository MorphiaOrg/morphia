ext.configDir = new File(rootDir, 'config')
ext.slf4jVersion = '1.7.5'
ext.git = find('git')
ext.majorVersion = major(version)

ext.latest = gitVersion() == 'master' ? version : latest_release

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.2'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

configure(subprojects.findAll { it.name != 'util' }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'optional-base'

    group = 'org.mongodb.morphia'
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    evaluationDependsOn(':util')

    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenLocal()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    project.archivesBaseName = "morphia-${project.name}"

    task listDependencies << {
        configurations.compile.each { File file -> println file }
    }

    task testCoverage(dependsOn: check)

    checkstyle {
        toolVersion = "6.7"
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        toolVersion = '3.0.0'
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }


    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation', '-Xlint:-options']
    }

    tasks.withType(Test) {
        if (System.getenv()['RS_ENABLED'] == "true") {
            systemProperty 'MONGO_URI', 'mongodb://localhost:27017,localhost:27018,localhost:27019'
        }


        useJUnit {
        }

        if (!JavaVersion.current().isJava8Compatible()) {
            exclude 'org/mongodb/morphia/converters/LocalDate*', 'org/mongodb/morphia/converters/LocalTime*',
                    'org/mongodb/morphia/converters/Instant*', 'org/mongodb/morphia/converters/Java8*'
        }

        jacoco { enabled = false }

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }


    test {
        // set heap size for the test JVM(s)
        minHeapSize = "256m"
        maxHeapSize = "512m"
    }

    task quickCheck(dependsOn: ['checkstyleMain', 'checkstyleTest', 'findbugsMain']) {}

    javadoc {
        dependsOn project(':util').compileJava //We need taglets to be compiled

        options.author = true
        options.version = true
        options.tagletPath project(':util').sourceSets.main.output.classesDir
        options.setTaglets([ 'taglets.ManualTaglet', 'taglets.ServerReleaseTaglet' ])
        options.links 'http://docs.oracle.com/javase/6/docs/api/'
        options.links 'http://api.mongodb.org/java/3.0/'
        title "Morphia ${majorVersion} API"
        options.encoding = 'UTF-8'
        options.charSet 'UTF-8'
        options.docEncoding 'UTF-8'
    }
}

task clirrRootReport(type: org.kordamp.gradle.clirr.ClirrReportTask) << {
    dependsOn = subprojects.tasks.clirr
    reports = files((subprojects.findAll { it.clirr.enabled == true }).tasks.clirr.xmlReport)
}

def buildingWith(n) {
    project.hasProperty(n)
}

def major(fullVersion) {
    fullVersion.split('\\.').dropRight(1).join('.') +
        (gitVersion() == 'master' && fullVersion.contains('-SNAPSHOT') ? '-SNAPSHOT' : '')
}

def gitVersion() {
    def stdOut = new ByteArrayOutputStream()
    exec {
        commandLine git, "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdOut
        ignoreExitValue = true
    }

    return stdOut.toString().trim()
}

def find(executable) {
    def list = ['/usr/local/bin/', '/usr/bin/']
    list.findResult {
        def exec = file(it + executable)
        if(exec.exists()) {
            exec.absolutePath
        }
    }
}

apply from: 'gradle/osgi-compatibility.gradle'
apply from: 'gradle/release-process.gradle'
apply from: 'gradle/docs.gradle'
