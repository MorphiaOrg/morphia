def urlVersion = version.split('\\.')[0..1].join('.')
def formalVersion = version.split('\\.').dropRight(1).join('.') + ( version.contains('-SNAPSHOT') ? '-SNAPSHOT' : '')
def ghPages = file("build/gh-pages")

ext.hugo = find('hugo')
ext.git = find('git')

def find(executable) {
    def list = ['/usr/local/bin/', 'usr/bin/']
    list.findResult {
        def exec = file(it + executable)
        if(exec.exists()) {
            exec.absolutePath
        }
    }
}

task showExecutables << {
    println "hugo = $hugo"
    println "git = $git"
}

def gitVersion() {
    def stdOut = new ByteArrayOutputStream()
    exec {
        commandLine git, "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdOut
        ignoreExitValue = true
    }

    return stdOut.toString().trim()
}

def forceLanding() {
    gitVersion() == 'master' || buildingWith('forceLanding')
}


task publishReference(dependsOn : [ 'reference', 'clonePages']) << {

    def referencePage = new File(ghPages, urlVersion)
    referencePage.mkdirs()
    copy {
        from 'docs/reference/public'
        into referencePage
    }
    exec {
        workingDir referencePage
        commandLine git
        args("add", ".")
    }
}

task publishLanding(dependsOn : [ 'landing', 'clonePages']) << {
    ghPages.mkdirs()
    copy {
        from 'docs/landing/public'
        into ghPages
    }
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        args("add", ".")
    }
}

task pushDocs(dependsOn : [ 'publishReference', 'publishLanding' ]) << {
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        ignoreExitValue true
        args("commit", "-a", "-m", "pushing docs updates")
    }
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        args("push")
    }

}

task landing << {
    exec {
        workingDir 'docs/landing'
        environment System.getenv()
        commandLine hugo
    }
}

landing.onlyIf { forceLanding() }
publishLanding.onlyIf { forceLanding() }

task reference(dependsOn: ':morphia:javadoc') << {
    exec {
        workingDir 'docs/reference'
        environment System.getenv()
        commandLine hugo
    }
    copy {
        from 'morphia/build/docs'
        into 'docs/reference/public'
    }

    def input = 'docs/reference/config.toml'
    def temp = input + '.temp'
    file( temp ).withWriter { w ->
      file( input ).eachLine { line ->
        w << (line.startsWith('baseurl = "') ? "baseurl = \"/morphia/${urlVersion}\"" : line) + '\n'
      }
    }
    file(temp).renameTo(file(input))

    input = 'docs/reference/data/mongodb.toml'
    temp = input + '.temp'
    new File( temp ).withWriter { w ->
      new File( input ).eachLine { line ->
        w << (line.startsWith('currentVersion = "') ? "currentVersion = \"${formalVersion}\"" : line) + '\n'
      }
    }
    file(temp).renameTo(file(input))
/*
    copy {
        from 'docs/reference/config.toml'
        into 'docs/reference/config.toml.backup'

        filter { String line ->
            line.startsWith('baseurl = "') ? "baseurl = /morphia/${shortVersion}" : line
        }
    }

    move {
        from 'docs/reference/config.toml.backup'
        into 'docs/reference/config.toml'
    }
*/
}

task clonePages << {
    def pages = new File("build/gh-pages")
    if (!pages.exists()) {
        def stream = new ByteArrayOutputStream()

        exec {
            workingDir rootDir
            environment System.getenv()
            commandLine git
            args("config", "--get", "remote.origin.url")
            standardOutput = stream
        }

        def url = new String(stream.toByteArray()).trim()
        new File("build").mkdirs()
        exec {
            workingDir 'build'
            environment System.getenv()
            commandLine git
            args("clone", url, "-b", "gh-pages", "gh-pages")
        }
    } else {
        println "${pages} already exists.  skipping clone."
        exec {
            workingDir 'build/gh-pages'
            environment System.getenv()
            commandLine git
            args("pull")
        }

    }
}