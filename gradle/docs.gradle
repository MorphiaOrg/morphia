def urlVersion = version.split('\\.')[0..1].join('.')
def formalVersion = version.split('\\.').dropRight(1).join('.') + ( version.contains('-SNAPSHOT') ? '-SNAPSHOT' : '')
def ghPages = file("build/gh-pages")

ext.hugo = find('hugo')

task showExecutables << {
    println "hugo = $hugo"
    println "git = $git"
}

def forceLanding() {
    gitVersion() == 'master' || buildingWith('forceLanding')
}


task publishReference(dependsOn : [ 'reference', 'clonePages']) << {

    def referencePage = new File(ghPages, urlVersion)
    referencePage.mkdirs()
    copy {
        from 'docs/reference/public'
        into referencePage
    }
    exec {
        workingDir referencePage
        commandLine git
        args("add", ".")
    }
}

task publishLanding(dependsOn : [ 'landing', 'clonePages']) << {
    ghPages.mkdirs()
    copy {
        from 'docs/landing/public'
        into ghPages
    }
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        args("add", ".")
    }
}

task pushDocs(dependsOn : [ 'publishReference', 'publishLanding' ]) << {
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        ignoreExitValue true
        args("commit", "-a", "-m", "pushing docs updates")
    }
    exec {
        workingDir ghPages
        environment System.getenv()
        commandLine git
        args("push")
    }

}

task landing << {
    def file = file('docs/landing/data/releases.toml')
    if (!file.text.contains(latest_release)) {
        throw new TaskExecutionException(it, new Exception("Latest release not listed in $file"))
    }

    exec {
        workingDir 'docs/landing'
        environment System.getenv()
        commandLine hugo
    }
}

landing.onlyIf { forceLanding() }
publishLanding.onlyIf { forceLanding() }

task reference(dependsOn: ':morphia:javadoc') << {
    exec {
        workingDir 'docs/reference'
        environment System.getenv()
        commandLine hugo
    }
    copy {
        from 'morphia/build/docs'
        into 'docs/reference/public'
    }

    update('docs/reference/content/getting-started/installation-guide.md', [
            [ '{{< install version', "{{< install version=\"${latest}\" >}}"]
    ])

    update('docs/reference/config.toml', [
            [ 'baseurl = "', "baseurl = \"/morphia/${urlVersion}\""],
            [ 'latest = "', "latest = \"${latest}\""]
    ])

    update('docs/reference/data/mongodb.toml', [
            ['githubBranch = "', "githubBranch = \"${gitVersion()}\""],
            ['currentVersion = "', "currentVersion = \"${majorVersion}\""]
    ])

/*
    copy {
        from 'docs/reference/config.toml'
        into 'docs/reference/config.toml.backup'

        filter { String line ->
            line.startsWith('baseurl = "') ? "baseurl = /morphia/${shortVersion}" : line
        }
    }

    move {
        from 'docs/reference/config.toml.backup'
        into 'docs/reference/config.toml'
    }
*/
}

task viewLanding(dependsOn: 'landing') << {
    exec {
        workingDir 'docs/landing'
        environment System.getenv()
        commandLine hugo
        args("server", "--baseUrl=http://localhost/", "--buildDrafts", "--watch")
    }
}

task viewReference(dependsOn: 'reference') << {
    exec {
        workingDir 'docs/reference'
        environment System.getenv()
        commandLine hugo
        args("server", "--baseUrl=http://localhost/", "--buildDrafts", "--watch")
    }
}

task clonePages << {
    def pages = new File("build/gh-pages")
    if (!pages.exists()) {
        def stream = new ByteArrayOutputStream()

        exec {
            workingDir rootDir
            environment System.getenv()
            commandLine git
            args("config", "--get", "remote.origin.url")
            standardOutput = stream
        }

        def url = new String(stream.toByteArray()).trim()
        new File("build").mkdirs()
        exec {
            workingDir 'build'
            environment System.getenv()
            commandLine git
            args("clone", url, "-b", "gh-pages", "gh-pages")
        }
    } else {
        println "${pages} already exists.  skipping clone."
        exec {
            workingDir 'build/gh-pages'
            environment System.getenv()
            commandLine git
            args("pull")
        }

    }
}

def update(input, replacements) {
    def temp = input + '.temp'
    file(temp).withWriter { w ->
        file(input).eachLine { line ->
            replacements.forEach { replacement ->
                if (line.startsWith(replacement[0])) line = replacement[1]
            }
            w << line + '\n'
        }
    }
    file(temp).renameTo(file(input))
}